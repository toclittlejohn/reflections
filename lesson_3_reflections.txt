When would you want to create a remote repository rather than keeping all your work local?
A remote repository would be useful when centralized access is needed for colloborating
with others.

Why might you want to always pull changes manually rather than having Git automatically stay
up-to-date with your remote repository?  Manually pulling changes may be preferrable to having 
Git automatically stay up-to-date with the remote repository because there may be changes to
the remote repository that you don't want automatically added to the local repository or there
might be changes that you want added to the local repository at a particular time.

Describe the differences between forks, clones, and branches. When would you use one instead 
of another?  Differences between forks, clones and branches are that forks are a copy of 
a repository made by GitHub, on their server and forks are only available on GitHub whereas
clones are also copies of a repository but a clone can be made on GitHub or on a local 
machine.  The forks are never found on local machines.  Branches are different from
forks and clones because forks and clones are copies of a repository whereas branches
are an offshoot of a repository that allows the commits that existed prior to the 
branch being started to appear in the branch and the branch allows for chagnes to be
made independent of the main or any other branches in the repository.

What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit of having a copy of the last known state of the remote stored locally is 
that you'll have access to commmit information as of that last known state when offline.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Collaboration without GitHub could be done via a sharepoint site or another file sharing site.  
Allowing more than one person to work on the file simultaneously would be harder and keeping
up with the history of the changes would be harder.  The use of the file sharing site might 
be easier.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have? A separate branch would be useful when, in a 
collaboration, you want to suggest changes to the master.  The suggested changes can be 
created in a branch and then the request to add those changes to a master can be sent 
via a pull request.  The pull request gives the other collaborators a chance to review 
the suggested changes before those changes are added to the master.  Using a branch 
allows for experimentation and trialing of  new features before adding anything to 
the master branch and to avoid breaking the master.  The benefit of adding directly 
to the master is the ease of use.  Adding directly to the master avoids the need to 
create a branch and update the branch with changes to the master  and then merge 
the updated master into the branch and push the updated local branch to the remote 
branch on GitHub while also potenitally updating an existing pull request.  Which, 
after review from collaborators could possibly be merged with the master branch.  The 
steps involved with using branches are more complicated but they allow more flexibilty
and opportunity to eventually affect change to the master. 
