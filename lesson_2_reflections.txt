What happens when you initialize a repository? Why do you need to do it?  
When you initialize a repository git establishes a version control location for the initial following versions of the files for the repository.  
You need to establish the repository to aid in tracking the various versions of the files in 
the directory.  Remembering to use one commit per logical change.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is different from the working directory and the repository because the staging area is just 
where the files go before a commit is completed.  The working directory is where the files are saved before they are added to the repository via a commit.  The repository is the version control house where the files are tracked. 

How can you use the staging area to make sure you have one commit per logical change?
The staging area can be used to either bundle or isolate individual or bundles of changes together 
into one or multiple commits.  This allows you further control over which changes get committed together. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful in keeping a history organized when some changes want to be trialed without affecting the 
master branch or when permananent changes are needed but the master branch needs to be maintained too.

How do the diagrams help you visualize the branch structure?
Diagrams help visualize the branch structure by helping you see what the parent commits are for each commit and
that helps you see where the branches lie within the various commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches addes the changes from the two branches into one file.  It's represented in the 
diagram as having two parents in order to demonstrate that it is a file made of two separate branches. 